# Calculate distance between points using Haversine formula (in km)
mutate(
distance = geosphere::distHaversine(
cbind(lag(lon), lag(lat)),
cbind(lon, lat)
) / 1000
) %>%
# Calculate speed (km/h)
mutate(speed = distance / time_diff) %>%
# Calculate elevation difference
mutate(elev_diff = elevation - lag(elevation)) %>%
# Calculate slope (rise/run, as percentage)
mutate(slope = (elev_diff / (distance * 1000)) * 100) %>%
# Remove temporary columns
select(-time_diff, -distance, -elev_diff)
head(df_processed)
plot(x=df_processed$speed, y=df_processed$slope)
# Function to determine UTM zone from longitude
get_utm_zone <- function(lon) {
floor((lon + 180) / 6) + 1
}
# Process the dataframe
df_processed <- df %>%
# Convert to proper datetime and extract components
mutate(
datetime = ymd_hms(time),
year = year(datetime),
month = month(datetime),
day = day(datetime),
time_only = format(datetime, "%H:%M:%S")
) %>%
# Determine UTM zone for each point
mutate(utm_zone = get_utm_zone(lon)) %>%
# Group by UTM zone to handle projections separately
group_by(utm_zone) %>%
# Convert to sf object and transform to appropriate UTM
do({
zone <- unique(.$utm_zone)
epsg_code <- ifelse(zone == 32, 32632, 32633)
st_as_sf(., coords = c("lon", "lat"), crs = 4326) %>%
st_transform(epsg_code) %>%
mutate(
easting = st_coordinates(.)[,1],
northing = st_coordinates(.)[,2]
) %>%
st_drop_geometry()
}) %>%
ungroup() %>%
# Arrange by time to ensure proper order
arrange(datetime) %>%
# Calculate time difference in hours
mutate(
time_diff = as.numeric(difftime(datetime, lag(datetime), units = "hours")),
# Calculate Euclidean distance in meters (since we're in projected CRS)
distance_m = sqrt((easting - lag(easting))^2 + (northing - lag(northing))^2),
# Calculate speed in km/h
speed_kmh = (distance_m / 1000) / time_diff,
# Calculate elevation difference
elev_diff = elevation - lag(elevation),
# Calculate slope percentage (rise/run × 100)
slope_pct = (elev_diff / distance_m) * 100
) %>%
# Select final columns
select(-time_diff, -distance_m, -elev_diff, -utm_zone, -easting, -northing)
#
pacman::p_load(XML, dplyr, lubridate, geosphere, sf)
# Process the dataframe
df_processed <- df %>%
# Convert to proper datetime and extract components
mutate(
datetime = ymd_hms(time),
year = year(datetime),
month = month(datetime),
day = day(datetime),
time_only = format(datetime, "%H:%M:%S")
) %>%
# Determine UTM zone for each point
mutate(utm_zone = get_utm_zone(lon)) %>%
# Group by UTM zone to handle projections separately
group_by(utm_zone) %>%
# Convert to sf object and transform to appropriate UTM
do({
zone <- unique(.$utm_zone)
epsg_code <- ifelse(zone == 32, 32632, 32633)
st_as_sf(., coords = c("lon", "lat"), crs = 4326) %>%
st_transform(epsg_code) %>%
mutate(
easting = st_coordinates(.)[,1],
northing = st_coordinates(.)[,2]
) %>%
st_drop_geometry()
}) %>%
ungroup() %>%
# Arrange by time to ensure proper order
arrange(datetime) %>%
# Calculate time difference in hours
mutate(
time_diff = as.numeric(difftime(datetime, lag(datetime), units = "hours")),
# Calculate Euclidean distance in meters (since we're in projected CRS)
distance_m = sqrt((easting - lag(easting))^2 + (northing - lag(northing))^2),
# Calculate speed in km/h
speed_kmh = (distance_m / 1000) / time_diff,
# Calculate elevation difference
elev_diff = elevation - lag(elevation),
# Calculate slope percentage (rise/run × 100)
slope_pct = (elev_diff / distance_m) * 100
) %>%
# Select final columns
select(-time_diff, -distance_m, -elev_diff, -utm_zone, -easting, -northing)
# Handle the first row NAs if needed
df_processed <- df_processed %>%
mutate(across(c(speed_kmh, slope_pct), ~ifelse(row_number() == 1, 0, .)))
plot(x=df_processed$speed, y=df_processed$slope)
df_processed$speed
head(df_processed)
plot(x=df_processed$speed_kmh, y=df_processed$slope_pct)
plot(x=df_processed$speed_kmh)
max(df_processed$speed_kmh)
plot(x=df_processed[df_processed$speed_kmh < 100, "speed_kmh"])
plot(y=df_processed[df_processed$speed_kmh < 100, "speed_kmh"])
#
pacman::p_load(XML, dplyr, lubridate, geosphere, sf, ggplot2, scales)
#
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, max(df_processed$speed_kmh, na.rm = TRUE) * 1.1)) +  # Add 10% padding
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#
# Create the plot
ggplot(df_processed, aes(x = datetime, y = speed_kmh)) +
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, max(df_processed$speed_kmh, na.rm = TRUE) * 1.1)) +  # Add 10% padding
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#
# Create the plot
ggplot(df_processed, aes(x = datetime, y = speed_kmh)) +
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, 100, na.rm = TRUE) * 1.1)) +  # Add 10% padding
#
# Create the plot
ggplot(df_processed, aes(x = datetime, y = speed_kmh)) +
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, 100), expand = c(0,0)) +  # Add 10% padding
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#
# Create the plot
ggplot(df_processed, aes(x = datetime, y = slope)) +
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, 100), expand = c(0,0)) +  # Add 10% padding
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#
# Create the plot
ggplot(df_processed, aes(x = datetime, y = slope_pct)) +
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, 100), expand = c(0,0)) +  # Add 10% padding
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#
# Create the plot
ggplot(df_processed, aes(x = datetime, y = slope_pct)) +
geom_line(color = "#0072B2", linewidth = 0.8) +  # Blue line for speed
geom_point(color = "#D55E00", size = 1.5, alpha = 0.6) +  # Orange points
labs(
title = "Speed Over Time",
x = "Date and Time",
y = "Speed (km/h)",
caption = "Data from GPS tracking"
) +
scale_x_datetime(
breaks = pretty_breaks(n = 10),  # Adjust number of breaks as needed
labels = date_format("%Y-%m-%d\n%H:%M")  # Two-line date/time format
) +
scale_y_continuous(limits = c(0, 20), expand = c(0,0)) +  # Add 10% padding
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
pacman::p_load(terra, sf)
setwd("/Users/ajcg93/Desktop/Portugal/DSM")
# 1. Load the raster and vector data
dsm <- raster("DSM.tif")
# 1. Load the raster and vector data
dsm <- rast("DSM.tif")
dsm_area <- st_read("DSM_area.gpkg")
# 2. Create masks for each polygon
# Convert polygons to SpatVector for terra
dsm_area_vect <- vect(dsm_area)
# Polygon 0 (assuming it's the first feature in the gpkg)
poly0_mask <- rasterize(dsm_area_vect[1,], dsm, field = 1, background = 0)
# Polygon 1 (assuming it's the second feature in the gpkg)
poly1_mask <- rasterize(dsm_area_vect[2,], dsm, field = 1, background = 0)
# 3. Process the raster according to requirements
# Create a copy to modify
dsm_clean <- dsm
# Replace -999 in polygon 0 areas with 0
dsm_clean[dsm_clean == -999 & poly0_mask == 1] <- 0
# Replace -999 in polygon 1 areas with NA
dsm_clean[dsm_clean == -999 & poly1_mask == 1] <- NA
# 4. Transform to EPSG:4326
dsm_clean <- project(dsm_clean, "EPSG:4326")
plot(dsm_clean)
# 3. Process the raster according to requirements
# Create a copy to modify
dsm_clean <- dsm
# Replace -999 in polygon 0 areas with 0
dsm_clean[dsm_clean == -999 & poly0_mask == 1] <- 0
# Replace -999 in polygon 1 areas with NA
dsm_clean[dsm_clean <= 0 & poly1_mask == 1] <- NA
# 4. Transform to EPSG:4326
dsm_clean <- project(dsm_clean, "EPSG:4326")
plot(dsm_clean)
# 5. Export the cleaned raster
writeRaster(dsm_clean, "DSM_Clean.tif", filetype = "GTiff", overwrite = TRUE)
# 2. Create masks for each polygon
# Convert polygons to SpatVector for terra
dsm_area_vect <- vect(dsm_area)
# Polygon 0 (assuming it's the first feature in the gpkg)
poly0_mask <- rasterize(dsm_area_vect[1,], dsm, field = 1, background = 0)
# Polygon 1 (assuming it's the second feature in the gpkg)
poly1_mask <- rasterize(dsm_area_vect[2,], dsm, field = 1, background = 0)
# 3. Process the raster according to requirements
# Create a copy to modify
dsm_clean <- dsm
# Replace -999 in polygon 0 areas with 0
dsm_clean[dsm_clean == -999 & poly0_mask == 1] <- 0
# Replace -999 in polygon 1 areas with NA
dsm_clean[dsm_clean <= 0 & poly1_mask == 1] <- NA
# 5. Export the cleaned raster
writeRaster(dsm_clean, "DSM_Clean_NP.tif", filetype = "GTiff", overwrite = TRUE)
# 4. Transform to EPSG:4326
dsm_clean <- project(dsm_clean, "EPSG:4326")
# 5. Export the cleaned raster
writeRaster(dsm_clean, "DSM_Clean_P.tif", filetype = "GTiff", overwrite = TRUE)
#################################################################
# 1. Define DSM path
dsm_path <- "/Users/ajcg93/Desktop/Portugal/DSM/Height/DSM_Clean_NP.tif"
CRSproj <- "EPSG:3763"
# 2. Define Flight Parameters
deploy_coords <- c(-108832.71,-59651.78)
land_coords <- c(-108763.81,-59692.60)
SamplePoints <- 80
Height_Path <- 50
MinDistance <- 1
FlightSpeed <- 2.5
# 3. Define Calibration figure Parameters
cal_coords <- c(-108812.79,-59624.90)
CalDiameter <- 10
CalHeight <- 80
CalAngle <- 80
CalResolution <- 6
CalSpeed <- 5
# 4. Generate flight path
flight_path <- create_flight_path(
deploy_coords = deploy_coords,
land_coords = land_coords,
dsm_path = dsm_path,
N = SamplePoints,
H = Height_Path,
crs_proj = "EPSG:3763",
minDist = MinDistance,
speed_p = FlightSpeed,
calfig_params = list(
Lat = cal_coords[1],
Lon = cal_coords[2],
diam = CalDiameter,
H = CalHeight,
angle = CalAngle,
res = CalResolution,
speed_c = CalSpeed
)
)
# Load package
library(SMARTAGL)
# 4. Generate flight path
flight_path <- create_flight_path(
deploy_coords = deploy_coords,
land_coords = land_coords,
dsm_path = dsm_path,
N = SamplePoints,
H = Height_Path,
crs_proj = "EPSG:3763",
minDist = MinDistance,
speed_p = FlightSpeed,
calfig_params = list(
Lat = cal_coords[1],
Lon = cal_coords[2],
diam = CalDiameter,
H = CalHeight,
angle = CalAngle,
res = CalResolution,
speed_c = CalSpeed
)
)
# 5. Inspect output
plot_flight_path(flight_path) # avoid the calibrations
plot_flight_map(flight_path) # add the calibrations
# 6. Export data
export_flight_path(flight_path =  flight_path,
output_path = paste0("/Users/ajcg93/Desktop/Portugal/AOI_1/Profile1_",Height_Path,".csv"),
include_headers = TRUE)
# 2. Define Flight Parameters
deploy_coords <- c(-108888.26,-59624.30)
land_coords <- c(-108763.81,-59692.60)
SamplePoints <- 80
Height_Path <- 50
MinDistance <- 1
FlightSpeed <- 2.5
# 3. Define Calibration figure Parameters
cal_coords <- c(-108778.15,-59590.25)
CalDiameter <- 10
CalHeight <- 80
CalAngle <- 80
CalResolution <- 6
CalSpeed <- 5
# 4. Generate flight path
flight_path <- create_flight_path(
deploy_coords = deploy_coords,
land_coords = land_coords,
dsm_path = dsm_path,
N = SamplePoints,
H = Height_Path,
crs_proj = "EPSG:3763",
minDist = MinDistance,
speed_p = FlightSpeed,
calfig_params = list(
Lat = cal_coords[1],
Lon = cal_coords[2],
diam = CalDiameter,
H = CalHeight,
angle = CalAngle,
res = CalResolution,
speed_c = CalSpeed
)
)
# 5. Inspect output
plot_flight_path(flight_path) # avoid the calibrations
Height_Path <- 80
MinDistance <- 1
FlightSpeed <- 2.5
# 3. Define Calibration figure Parameters
cal_coords <- c(-108778.15,-59590.25)
CalDiameter <- 10
CalHeight <- 80
CalAngle <- 80
CalResolution <- 6
CalSpeed <- 5
# 4. Generate flight path
flight_path <- create_flight_path(
deploy_coords = deploy_coords,
land_coords = land_coords,
dsm_path = dsm_path,
N = SamplePoints,
H = Height_Path,
crs_proj = "EPSG:3763",
minDist = MinDistance,
speed_p = FlightSpeed,
calfig_params = list(
Lat = cal_coords[1],
Lon = cal_coords[2],
diam = CalDiameter,
H = CalHeight,
angle = CalAngle,
res = CalResolution,
speed_c = CalSpeed
)
)
# 5. Inspect output
plot_flight_path(flight_path) # avoid the calibrations
plot_flight_map(flight_path) # add the calibrations
# 6. Export data
export_flight_path(flight_path =  flight_path,
output_path = paste0("/Users/ajcg93/Desktop/Portugal/AOI_1/Profile1_",Height_Path,".csv"),
include_headers = TRUE)
# 2. Define Flight Parameters
deploy_coords <- c(-108888.26,-59624.30)
land_coords <- c(-108763.81,-59692.60)
SamplePoints <- 80
Height_Path <- 60
MinDistance <- 1
FlightSpeed <- 2.5
# 3. Define Calibration figure Parameters
cal_coords <- c(-108778.15,-59590.25)
CalDiameter <- 10
CalHeight <- 60
CalAngle <- 80
CalResolution <- 6
CalSpeed <- 5
# 4. Generate flight path
flight_path <- create_flight_path(
deploy_coords = deploy_coords,
land_coords = land_coords,
dsm_path = dsm_path,
N = SamplePoints,
H = Height_Path,
crs_proj = "EPSG:3763",
minDist = MinDistance,
speed_p = FlightSpeed,
calfig_params = list(
Lat = cal_coords[1],
Lon = cal_coords[2],
diam = CalDiameter,
H = CalHeight,
angle = CalAngle,
res = CalResolution,
speed_c = CalSpeed
)
)
# 5. Inspect output
plot_flight_path(flight_path) # avoid the calibrations
plot_flight_map(flight_path) # add the calibrations
# 6. Export data
export_flight_path(flight_path =  flight_path,
output_path = paste0("/Users/ajcg93/Desktop/Portugal/AOI_1/Profile1_",Height_Path,".csv"),
include_headers = TRUE)
source("~/Desktop/Portugal/AOI_1/AOI_1.R")
